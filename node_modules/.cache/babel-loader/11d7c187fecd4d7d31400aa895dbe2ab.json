{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Drunkin_Nord\\\\Desktop\\\\News Front Page\\\\news-front\\\\src\\\\Game\\\\Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Board from \"./components/Board\";\nimport History from \"./components/History\";\nimport StatusMessage from \"./components/StatusMessage\";\nimport { calculateWinner } from \"./helpers\";\nimport \"./styles/root.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NEW_GAME = [{\n  board: Array(9).fill(null),\n  isXNext: true\n}];\n\nconst Game = () => {\n  _s();\n\n  const [history, setHistory] = useState(NEW_GAME);\n  const [currentMove, setCurrentMove] = useState(0);\n  const current = history[currentMove];\n  const {\n    winner,\n    winningSquares\n  } = calculateWinner(current.board);\n\n  const handleSquareClick = position => {\n    if (current.board[position] || winner) {\n      return;\n    }\n\n    setHistory(prev => {\n      const last = prev[prev.length - 1];\n      const newBoard = last.board.map((square, pos) => {\n        if (pos === position) {\n          return last.isXNext ? \"X\" : \"O\";\n        }\n\n        return square;\n      });\n      return prev.concat({\n        board: newBoard,\n        isXNext: !last.isXNext\n      });\n    });\n    setCurrentMove(prev => prev + 1);\n  };\n\n  const moveTo = move => {\n    setCurrentMove(move);\n  };\n\n  const onNewGame = () => {\n    setHistory(NEW_GAME);\n    setCurrentMove(0);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      class: \"return\",\n      children: \"Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"TIC \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"text-green\",\n        children: \"TAC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this), \" TOE\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StatusMessage, {\n      winner: winner,\n      current: current\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      board: current.board,\n      handleSquareClick: handleSquareClick,\n      winningSquares: winningSquares\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: onNewGame,\n      className: `btn-reset ${winner ? \"active\" : \"\"}`,\n      children: \"Start new game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        fontWeight: \"normal\"\n      },\n      children: \"Current game history\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(History, {\n      history: history,\n      moveTo: moveTo,\n      currentMove: currentMove\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-balls\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Game, \"GW7s6lxCI6EnK0vwevKaE/RokLc=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["C:/Users/Drunkin_Nord/Desktop/News Front Page/news-front/src/Game/Game.js"],"names":["React","useState","Board","History","StatusMessage","calculateWinner","NEW_GAME","board","Array","fill","isXNext","Game","history","setHistory","currentMove","setCurrentMove","current","winner","winningSquares","handleSquareClick","position","prev","last","length","newBoard","map","square","pos","concat","moveTo","move","onNewGame","fontWeight"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Board from \"./components/Board\";\nimport History from \"./components/History\";\nimport StatusMessage from \"./components/StatusMessage\";\nimport { calculateWinner } from \"./helpers\";\n\nimport \"./styles/root.scss\";\n\nconst NEW_GAME = [{ board: Array(9).fill(null), isXNext: true }];\n\nconst Game = () => {\n  const [history, setHistory] = useState(NEW_GAME);\n  const [currentMove, setCurrentMove] = useState(0);\n  const current = history[currentMove];\n\n  const { winner, winningSquares } = calculateWinner(current.board);\n\n  const handleSquareClick = (position) => {\n    if (current.board[position] || winner) {\n      return;\n    }\n\n    setHistory((prev) => {\n      const last = prev[prev.length - 1];\n\n      const newBoard = last.board.map((square, pos) => {\n        if (pos === position) {\n          return last.isXNext ? \"X\" : \"O\";\n        }\n\n        return square;\n      });\n\n      return prev.concat({ board: newBoard, isXNext: !last.isXNext });\n    });\n\n    setCurrentMove((prev) => prev + 1);\n  };\n\n  const moveTo = (move) => {\n    setCurrentMove(move);\n  };\n\n  const onNewGame = () => {\n    setHistory(NEW_GAME);\n    setCurrentMove(0);\n  };\n\n  return (\n    <div className=\"app\">\n      <h1 class=\"return\">Home</h1>\n      <h1>\n        TIC <span className=\"text-green\">TAC</span> TOE\n      </h1>\n      <StatusMessage winner={winner} current={current} />\n      <Board\n        board={current.board}\n        handleSquareClick={handleSquareClick}\n        winningSquares={winningSquares}\n      />\n      <button\n        type=\"button\"\n        onClick={onNewGame}\n        className={`btn-reset ${winner ? \"active\" : \"\"}`}\n      >\n        Start new game\n      </button>\n      <h2 style={{ fontWeight: \"normal\" }}>Current game history</h2>\n      <History history={history} moveTo={moveTo} currentMove={currentMove} />\n      <div className=\"bg-balls\" />\n    </div>\n  );\n};\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}