{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Drunkin_Nord\\\\Desktop\\\\News Front Page\\\\news-front\\\\src\\\\Movie\\\\Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport requests from \"./request\";\nimport \"./Row.css\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base = \"http://image.tmdb.org/t/p/original/\";\n\nfunction Row(props) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(props.fetchUrl);\n      setMovies(request.data.results);\n      return requests;\n    }\n\n    fetchData();\n  }, [props.fetchUrl]);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1\n    }\n  };\n  console.log(movies);\n\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.title) || \"\").then(url => {\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get(\"v\"));\n      }).catch(error => console.log(error));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        id: props.title,\n        children: props.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row-posters\",\n        children: movies.map(mov => /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => handleClick(mov),\n          className: `row_poster  ${props.isLarge && \"row_posterLarge\"}`,\n          src: `${base}${mov.poster_path}`,\n          alt: mov.title\n        }, mov.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n        videoId: trailerUrl,\n        opts: opts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Row, \"k63ruaDr6ck94JTzLN3dN+sD/HM=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["C:/Users/Drunkin_Nord/Desktop/News Front Page/news-front/src/Movie/Row.js"],"names":["React","useState","useEffect","axios","requests","YouTube","movieTrailer","base","Row","props","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","fetchUrl","data","results","opts","height","width","playerVars","autoplay","console","log","handleClick","movie","title","then","url","urlParams","URLSearchParams","URL","search","catch","error","map","mov","isLarge","poster_path","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,YAAP,MAAyB,eAAzB;;AAEA,MAAMC,IAAI,GAAG,qCAAb;;AAEA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAAA;;AAClB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,EAAD,CAA5C;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeY,SAAf,GAA2B;AACzB,YAAMC,OAAO,GAAG,MAAMZ,KAAK,CAACa,GAAN,CAAUP,KAAK,CAACQ,QAAhB,CAAtB;AACAN,MAAAA,SAAS,CAACI,OAAO,CAACG,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOf,QAAP;AACD;;AACDU,IAAAA,SAAS;AACV,GAPQ,EAON,CAACL,KAAK,CAACQ,QAAP,CAPM,CAAT;AAQA,QAAMG,IAAI,GAAG;AACXC,IAAAA,MAAM,EAAE,KADG;AAEXC,IAAAA,KAAK,EAAE,MAFI;AAGXC,IAAAA,UAAU,EAAE;AACV;AACAC,MAAAA,QAAQ,EAAE;AAFA;AAHD,GAAb;AAQAC,EAAAA,OAAO,CAACC,GAAR,CAAYhB,MAAZ;;AACA,QAAMiB,WAAW,GAAIC,KAAD,IAAW;AAC7B,QAAIhB,UAAJ,EAAgB;AACdC,MAAAA,aAAa,CAAC,EAAD,CAAb;AACD,KAFD,MAEO;AACLP,MAAAA,YAAY,CAAC,CAAAsB,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEC,KAAP,KAAgB,EAAjB,CAAZ,CACGC,IADH,CACSC,GAAD,IAAS;AACb,cAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAoB,IAAIC,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAlB;AACAtB,QAAAA,aAAa,CAACmB,SAAS,CAAChB,GAAV,CAAc,GAAd,CAAD,CAAb;AACD,OAJH,EAKGoB,KALH,CAKUC,KAAD,IAAWZ,OAAO,CAACC,GAAR,CAAYW,KAAZ,CALpB;AAMD;AACF,GAXD;;AAaA,sBACE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE;AAAI,QAAA,EAAE,EAAE5B,KAAK,CAACoB,KAAd;AAAA,kBAAsBpB,KAAK,CAACoB;AAA5B;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,kBACGnB,MAAM,CAAC4B,GAAP,CAAYC,GAAD,iBACV;AAEE,UAAA,OAAO,EAAE,MAAMZ,WAAW,CAACY,GAAD,CAF5B;AAGE,UAAA,SAAS,EAAG,eAAc9B,KAAK,CAAC+B,OAAN,IAAiB,iBAAkB,EAH/D;AAIE,UAAA,GAAG,EAAG,GAAEjC,IAAK,GAAEgC,GAAG,CAACE,WAAY,EAJjC;AAKE,UAAA,GAAG,EAAEF,GAAG,CAACV;AALX,WACOU,GAAG,CAACG,EADX;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA,cAFF,EAaG9B,UAAU,iBAAI,QAAC,OAAD;AAAS,QAAA,OAAO,EAAEA,UAAlB;AAA8B,QAAA,IAAI,EAAEQ;AAApC;AAAA;AAAA;AAAA;AAAA,cAbjB;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD;;GApDQZ,G;;KAAAA,G;AAsDT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport requests from \"./request\";\r\nimport \"./Row.css\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nconst base = \"http://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row(props) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(props.fetchUrl);\r\n      setMovies(request.data.results);\r\n      return requests;\r\n    }\r\n    fetchData();\r\n  }, [props.fetchUrl]);\r\n  const opts = {\r\n    height: \"390\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      // https://developers.google.com/youtube/player_parameters\r\n      autoplay: 1,\r\n    },\r\n  };\r\n  console.log(movies);\r\n  const handleClick = (movie) => {\r\n    if (trailerUrl) {\r\n      setTrailerUrl(\"\");\r\n    } else {\r\n      movieTrailer(movie?.title || \"\")\r\n        .then((url) => {\r\n          const urlParams = new URLSearchParams(new URL(url).search);\r\n          setTrailerUrl(urlParams.get(\"v\"));\r\n        })\r\n        .catch((error) => console.log(error));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"row\">\r\n        <h1 id={props.title}>{props.title}</h1>\r\n        <div className=\"row-posters\">\r\n          {movies.map((mov) => (\r\n            <img\r\n              key={mov.id}\r\n              onClick={() => handleClick(mov)}\r\n              className={`row_poster  ${props.isLarge && \"row_posterLarge\"}`}\r\n              src={`${base}${mov.poster_path}`}\r\n              alt={mov.title}\r\n            />\r\n          ))}\r\n        </div>\r\n        {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n"]},"metadata":{},"sourceType":"module"}